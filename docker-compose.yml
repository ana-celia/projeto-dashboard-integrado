version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: main_db
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin123
      POSTGRES_MULTIPLE_DATABASES: "main_db,superset,metabase"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - dashboard-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis para Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - dashboard-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Django
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DEBUG=False
      - DATABASE_URL=postgresql://admin:admin123@postgres:5432/main_db
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./backend:/app
      - backend_static:/app/staticfiles
      - backend_media:/app/data
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dashboard-network
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn core.wsgi:application --bind 0.0.0.0:8000 --workers 3"

  # Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - dashboard-network

  # Apache Superset
  superset:
    build: ./superset
    environment:
      - SUPERSET_DATABASE_URL=postgresql://admin:admin123@postgres:5432/superset
      - REDIS_URL=redis://redis:6379/0
    ports:
      - "8088:8088"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dashboard-network
    volumes:
      - superset_data:/app/superset_home

  # Metabase
  metabase:
    image: metabase/metabase:latest
    environment:
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: metabase
      MB_DB_PORT: 5432
      MB_DB_HOST: postgres
      MB_DB_USER: admin
      MB_DB_PASS: admin123
      MB_SITE_NAME: "Metabase Dashboard"
    ports:
      - "3001:3000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - dashboard-network
    volumes:
      - metabase_data:/metabase-data

  # Nginx - Proxy Reverso
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - backend_static:/static:ro
      - backend_media:/media:ro
    depends_on:
      - frontend
      - backend
      - superset
      - metabase
    networks:
      - dashboard-network

# Volumes para persistência de dados
volumes:
  postgres_data:
  backend_static:
  backend_media:
  superset_data:
  metabase_data:

# Rede para comunicação entre containers
networks:
  dashboard-network:
    driver: bridge