version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: postgres_db
    environment:
      POSTGRES_DB: main_db
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin123
      POSTGRES_MULTIPLE_DATABASES: "main_db,superset,metabase"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - dashboard-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d main_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Redis para Cache e Sessões
  redis:
    image: redis:7-alpine
    container_name: redis_cache
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - dashboard-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Backend Django
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: django_backend
    environment:
      - DEBUG=True
      - SECRET_KEY=django-insecure-dev-key-change-in-production
      - DATABASE_URL=postgresql://admin:admin123@postgres:5432/main_db
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - ALLOWED_HOSTS=localhost,127.0.0.1,backend,0.0.0.0
    volumes:
      - ./backend:/app
      - backend_static:/app/staticfiles
      - backend_media:/app/data
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dashboard-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    # Comando para desenvolvimento - remover em produção
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py runserver 0.0.0.0:8000"

  # Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: react_frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - dashboard-network
    environment:
      - VITE_API_URL=http://localhost:8000/api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Apache Superset
  superset:
    build: ./superset
    container_name: superset_bi
    environment:
      - SUPERSET_DATABASE_URL=postgresql://admin:admin123@postgres:5432/superset
      - REDIS_URL=redis://redis:6379/0
      - SUPERSET_SECRET_KEY=superset-secret-key-change-in-production
      - FLASK_ENV=development
    volumes:
      - superset_data:/app/superset_home
      - ./superset/superset_config.py:/app/superset_config.py
    ports:
      - "8088:8088"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dashboard-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  # Metabase
  metabase:
    image: metabase/metabase:latest
    container_name: metabase_bi
    environment:
      # Database do Metabase
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: metabase
      MB_DB_PORT: 5432
      MB_DB_HOST: postgres
      MB_DB_USER: admin
      MB_DB_PASS: admin123
      
      # Configurações gerais
      MB_SITE_NAME: "Dashboard Platform"
      MB_SITE_URL: http://localhost/metabase/
      MB_EMBEDDING_SECRET_KEY: "metabase-embedding-secret-key-123"
      
      # Configurações opcionais
      MB_EMBEDDING_APP_ORIGIN: "http://localhost"
      MB_ENABLE_EMBEDDING: "true"
      MB_JETTY_PORT: "3000"
      
    volumes:
      - metabase_data:/metabase-data
    ports:
      - "3001:3000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - dashboard-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  # Nginx - Proxy Reverso
  nginx:
    image: nginx:alpine
    container_name: nginx_proxy
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - backend_static:/static:ro
      - backend_media:/media:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
      superset:
        condition: service_healthy
      metabase:
        condition: service_healthy
    networks:
      - dashboard-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

# Volumes para persistência de dados
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_static:
    driver: local
  backend_media:
    driver: local
  superset_data:
    driver: local
  metabase_data:
    driver: local

# Rede para comunicação entre containers
networks:
  dashboard-network:
    driver: bridge
    name: dashboard-network